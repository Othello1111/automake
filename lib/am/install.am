## automake - create Makefile.in from Makefile.am
## Copyright (C) 2001, 2002, 2003, 2004, 2006  Free Software Foundation, Inc.

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
## 02110-1301, USA.

## ----------------------------------------- ##
## installdirs -- Creating the installdirs.  ##
## ----------------------------------------- ##

## The reason we loop over %am__installdirs% (instead of simply running
## `$(MKDIR_P) %am__installdirs%') is that directories variable such as
## `"$(DESTDIR)$(mydir)"' can potentially expand to `""' if `$(mydir)'
## is conditionally defined.  BTW, those directories are quoted in
## order to support installation paths with spaces.

if %?SUBDIRS%
.PHONY: installdirs installdirs-am
RECURSIVE_TARGETS += installdirs-recursive
installdirs: installdirs-recursive
installdirs-am:%installdirs-local%
?am__installdirs?	for dir in %am__installdirs%; do \
?am__installdirs?	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
?am__installdirs?	done
else !%?SUBDIRS%
.PHONY: installdirs
installdirs:%installdirs-local%
?am__installdirs?	for dir in %am__installdirs%; do \
?am__installdirs?	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
?am__installdirs?	done
endif !%?SUBDIRS%


## ----------------- ##
## Install targets.  ##
## ----------------- ##

.PHONY: install install-exec install-data uninstall
.PHONY: install-exec-am install-data-am uninstall-am

# Use AM_MAKEFLAGS to pass the value of the MANIFEST variable into
# submakes (not all makes do this automatically).  This can still be
# overridden with a setting of this variable on the $(MAKE) command
# line.  I think we really shouldn't be setting this variable -- if
# it causes a problem for anyone, we should edit a new variable in to
# the .am templates.
AM_MAKEFLAGS = MANIFEST=$(MANIFEST)

if %?SUBDIRS%
RECURSIVE_TARGETS += install-data-recursive install-exec-recursive \
		     install-recursive uninstall-recursive
REAL_INSTALL=install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive
else !%?SUBDIRS%
REAL_INSTALL=install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am
endif !%?SUBDIRS%

# Set to : to emit manifest lines, too
# (don't actually do this here -- it's done within install-manifest below).
MANIFEST=false

if %?INSTALLMANIFEST%
# If STAR_MANIFEST_DIR is defined and the MANIFEST variable has the
# (default) string value 'false', then invoke the install-manifest
# target, otherwise, do the real install rule.  This means that if
# this is being invoked from within an install-manifest rule further
# up the process tree, we don't create another manifest, which would
# stomp on the original.
#
# Any Makefile which does special installations should check the
# $(MANIFEST) variable, which will be ':' or 'false', and if it is
# true, emit a line to stdout, consisting of the string 'MANIFEST:'
# followed by the full path of the file being installed.
install: %maybe_BUILT_SOURCES% all-am
	if test -n "$(STAR_MANIFEST_DIR)" -a $(MANIFEST) = false; then \
	    $(MAKE) $(AM_MAKEFLAGS) install-manifest; \
	else \
	    $(MAKE) $(AM_MAKEFLAGS) $(REAL_INSTALL); \
	fi

.PHONY: install-manifest
install-manifest:
	$(mkdir_p) $(DESTDIR)$(STAR_MANIFEST_DIR)
	MFX=$${TMPDIR-/tmp}/manifest-$$$$-1; rm -f $$MFX; MF_INST_OK=:; \
## If this is a standard package, then it's easy.
## If POSS_SUPPRESS_INSTALL is true, then this install will presumably do
## very little, but we still let it run in case there is something useful
## it can do.
## Omit $(AM_MAKEFLAGS) here, since it contains MANIFEST=false (see above):
## some makes (Tru64 is the culprit) violate POSIX by not allowing multiple
## variable settings on the command line -- make should respect the last
## one; Tru64 make respects only the first.
?STANDARDMANIFEST?	  { $(MAKE) MANIFEST=: $(REAL_INSTALL) \
?STANDARDMANIFEST?	    || MF_INST_OK=false; } \
?STANDARDMANIFEST?	    | tee $$MFX | grep -v '^MANIFEST:' || :; \
## Otherwise, install the component to a staging area, using the
## STAR_MANIFEST_INSTALL_COMMAND defined in the Makefile.am, here available
## in MANIFESTMAKEINSTALL.
?!STANDARDMANIFEST?	  STG=$${TMPDIR-/tmp}/starconf-$$$$ ; \
?!STANDARDMANIFEST?	  rm -Rf $$STG ; \
?!STANDARDMANIFEST?	  $(mkdir_p) $$STG ; \
?!STANDARDMANIFEST?	  ( DESTDIR=$$STG; prefix=$(prefix); \
?!STANDARDMANIFEST?	      export DESTDIR prefix; \
?!STANDARDMANIFEST?	      %MANIFESTMAKEINSTALL% ) || MF_INST_OK=false ; \
?!STANDARDMANIFEST?	  if $$MF_INST_OK; then \
?!STANDARDMANIFEST?	    test -d $(DESTDIR)$(prefix) || $(mkdir_p) $(DESTDIR)$(prefix) ; \
## Find all the files in the staging area $STG, add any final installation
## location, append each of these to the manifest FD, and delete each
## (installed) file, so that the cp below will work.  The copy below will not
## act on anything above $STG/$(prefix), but nothing should be installed
## there, so that oughtn't to be a problem.  We rely on starconf macro
## STAR_SPECIAL_INSTALL_COMMAND to find a CP_RECURSIVE which will
## copy symlinks as symlinks.
?!STANDARDMANIFEST?	    (cd $$STG && find . ! -type d | \
?!STANDARDMANIFEST?	      sed "s,^\.,$$DESTDIR," | \
?!STANDARDMANIFEST?	      while read f; do \
?!STANDARDMANIFEST?	        echo MANIFEST:$$f; \
?!STANDARDMANIFEST?	        test -f $$f && chmod 666 $$f && rm -f $$f; \
## The following null command appears to be necessary.  The /bin/sh on
## Solaris (SunOS 5.9) appears to get very upset if it isn't there.
## I haven't a clue why!
?!STANDARDMANIFEST?	        :; \
?!STANDARDMANIFEST?	      done ) >$$MFX; \
?!STANDARDMANIFEST?	    if test -d "$$STG$(prefix)"; then \
?!STANDARDMANIFEST?	      echo "(cd $$STG$(prefix); $(CP_RECURSIVE) . $$DESTDIR$(prefix))"; \
?!STANDARDMANIFEST?	      (realdest=`cd $$DESTDIR$(prefix) && pwd`; cd $$STG$(prefix) && $(CP_RECURSIVE) . $$realdest ) || MF_INST_OK=false; \
?!STANDARDMANIFEST?	    else echo "NOTE: no files installed">&2; fi; \
?!STANDARDMANIFEST?	  fi; \
?!STANDARDMANIFEST?	  rm -Rf $$STG; \
## Now make the actual manifest file, if everything went well above
	  if $$MF_INST_OK; then \
	    MF=$${TMPDIR-/tmp}/manifest-$$$$-2; rm -f $$MF; \
	    ( echo "<?xml version='1.0'?>"; \
	      echo "<!DOCTYPE manifest SYSTEM 'componentinfo.dtd'>"; \
	      echo "<manifest component='$(PACKAGE)'>"; \
	      echo "<version>$(PACKAGE_VERSION)</version>"; \
## Avoid writing the <files> start- and end-tags if STAR_SUPPRESS_BUILD
## is present.  But extract the MANIFEST: lines from that file nonetheless:
## these will contain the <note> element which the install-am target put
## there.  If there is other material in that file, that's because some
## other part of the makefile messed up: not our problem right now.
?POSS_SUPPRESS_INSTALL?	      test -f STAR_SUPPRESS_BUILD || \
	      echo "<files>"; \
	      sed -n 's/^MANIFEST://p;' $$MFX; \
?POSS_SUPPRESS_INSTALL?	      test -f STAR_SUPPRESS_BUILD || \
	      echo "</files>"; \
	      echo "</manifest>"; \
	    ) >$$MF; \
	    $(INSTALL_DATA) $$MF $(DESTDIR)$(STAR_MANIFEST_DIR)/$(PACKAGE); \
	  else \
	    echo "Installation of component $(DESTDIR)$(STAR_MANIFEST_DIR)/$(PACKAGE) failed" >&2; \
	  fi; \
	  rm -f $$MFX $$MF; \
## Propagate the exit status to the calling make, and thence to the user
	  $$MF_INST_OK

else !%?INSTALLMANIFEST%
install:%maybe_BUILT_SOURCES% $(REAL_INSTALL)
endif !%?INSTALLMANIFEST%

.MAKE .PHONY: install-am
install-am: all-am
if %?POSS_SUPPRESS_INSTALL%
	@if test -f STAR_SUPPRESS_BUILD; then \
	  if $(MANIFEST); then \
	    echo "MANIFEST:<notes><p>This manifest file is a placeholder, as this component cannot be built.</p>"; \
	    echo "MANIFEST:<p>"; \
	    sed 's/^ */MANIFEST:/' STAR_SUPPRESS_BUILD; \
	    echo "MANIFEST:</p></notes>"; \
	  else \
	    echo "Installation suppressed" >&2; \
	  fi; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am; \
	fi
else !%?POSS_SUPPRESS_INSTALL%
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
endif !%?POSS_SUPPRESS_INSTALL%

.PHONY: installcheck
?SUBDIRS?installcheck: installcheck-recursive
?!SUBDIRS?installcheck: installcheck-am
?!SUBDIRS?.PHONY: installcheck-am
?!SUBDIRS?installcheck-am:

## If you ever modify this, keep in mind that INSTALL_PROGRAM is used
## in subdirectories, so never set it to a value relative to the top
## directory.
.MAKE .PHONY: install-strip
install-strip:
## Beware that they are two variables used to install programs:
##   INSTALL_PROGRAM is used for ordinary *_PROGRAMS
##   install_sh_PROGRAM is used for nobase_*_PROGRAMS (because install-sh
##                                                     creates directories)
## It's OK to override both with INSTALL_STRIP_PROGRAM, because
## INSTALL_STRIP_PROGRAM uses install-sh (see m4/strip.m4 for a rational).
##
## Use double quotes here because we might need to interpolate some
## backquotes at runtime.
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
